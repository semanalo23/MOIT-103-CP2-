/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package MotorPH_EmployeeAppGUI;

import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.Period;
import java.time.format.DateTimeParseException;
import java.util.Map;
import javax.swing.JOptionPane;

/**
 *
 * @author ASPIRE 7
 */
public class ver extends javax.swing.JFrame {

    private static final Map<Long, String> employeeMap = Map.ofEntries(
            Map.entry(10001L, "Manuel Garcia III"),
            Map.entry(10002L, "Antonio Lim"),
            Map.entry(10003L, "Bianca Sofia Aquino"),
            Map.entry(10004L, "Isabella Reyes"),
            Map.entry(10005L, "Eduard Hernandez"),
            Map.entry(10006L, "Andrea Mae Villanueva"),
            Map.entry(10007L, "Brad San Jose"),
            Map.entry(10008L, "Alice Romualdez"),
            Map.entry(10009L, "Rosie Atienza"),
            Map.entry(10010L, "Roderick Alvaro"),
            Map.entry(10011L, "Anthony Salcedo"),
            Map.entry(10012L, "Josie Lopez"),
            Map.entry(10013L, "Martha Farala"),
            Map.entry(10014L, "Leila Martinez"),
            Map.entry(10015L, "Fredrick Romualdez"),
            Map.entry(10016L, "Christian Mata"),
            Map.entry(10017L, "Selena DE Leon"),
            Map.entry(10018L, "Allison San Jose"),
            Map.entry(10019L, "Cydney Rosario"),
            Map.entry(10020L, "Mark Bautista"),
            Map.entry(10021L, "Darlene Lazaro"),
            Map.entry(10022L, "Kolby Delos Santos"),
            Map.entry(10023L, "Vella Santos"),
            Map.entry(10024L, "Tomas Del Rosario"),
            Map.entry(10025L, "Jacklyn Tolentino"),
            Map.entry(10026L, "Percival Gutierrez"),
            Map.entry(10027L, "Garfield Manalaysay"),
            Map.entry(10028L, "Lizeth Villegas"),
            Map.entry(10029L, "Carol Ramos"),
            Map.entry(10030L, "Emelia Macedo"),
            Map.entry(10031L, "Delia Aguilar"),
            Map.entry(10032L, "John Rafael Castro"),
            Map.entry(10033L, "Carlos Ian Martinez"),
            Map.entry(10034L, "Beatriz Santos")
    );

    /**
     * Creates new form ver
     */
    public ver() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField6 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        EmployeeID = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        HourlySalaryRate = new javax.swing.JTextField();
        BirthDate = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        LGITmph = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        LGOTmph = new javax.swing.JTextField();
        computebtn = new javax.swing.JButton();

        jTextField6.setText("jTextField6");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MotorPH Employee App");
        setBackground(new java.awt.Color(204, 204, 255));

        jLabel1.setForeground(new java.awt.Color(204, 0, 102));
        jLabel1.setText("Employee ID");

        jLabel2.setForeground(new java.awt.Color(204, 0, 102));
        jLabel2.setText("Hourly Salary Rate");

        jLabel3.setForeground(new java.awt.Color(204, 0, 102));
        jLabel3.setText("Birthdate");

        jLabel4.setText("(must be in YYYY-MM-DD)");

        jLabel5.setForeground(new java.awt.Color(204, 0, 102));
        jLabel5.setText("Log In Time");

        jLabel6.setText("(must be in HH:MM)");

        jLabel7.setForeground(new java.awt.Color(204, 0, 102));
        jLabel7.setText("Log Out Time");

        computebtn.setBackground(new java.awt.Color(0, 51, 204));
        computebtn.setForeground(new java.awt.Color(255, 255, 255));
        computebtn.setText("Compute Payroll");
        computebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computebtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(HourlySalaryRate, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(EmployeeID, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(56, 56, 56)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(BirthDate, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(LGITmph, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE))
                                        .addGap(31, 31, 31)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel7)
                                            .addComponent(LGOTmph, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(213, 213, 213)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(78, 78, 78))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(computebtn)
                                .addGap(20, 20, 20)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EmployeeID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BirthDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(HourlySalaryRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(jLabel7)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LGITmph, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LGOTmph, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addGap(29, 29, 29)
                .addComponent(computebtn)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void computebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computebtnActionPerformed
        try {
            // ✅ Retrieve user input
            long empNum = Long.parseLong(EmployeeID.getText());
            if (!employeeMap.containsKey(empNum)) {
                throw new IllegalArgumentException("❌ Error: Employee ID must be between 10001 and 10034.");
            }
            String empName = employeeMap.get(empNum);
            LocalDate birthDate = LocalDate.parse(BirthDate.getText());
            int age = Period.between(birthDate, LocalDate.now()).getYears();
            double hourlyRate = Double.parseDouble(HourlySalaryRate.getText());
            if (hourlyRate < 100 || hourlyRate > 600) {
                throw new IllegalArgumentException("❌ Error: Hourly Rate must be between 100 and 600.");
            }
            LocalTime loginTime = LocalTime.parse(LGITmph.getText());
            LocalTime logoutTime = LocalTime.parse(LGOTmph.getText());
            if (logoutTime.getHour() <= 6) {
                logoutTime = logoutTime.plusHours(12);
            }
            LocalTime gracePeriodEnd = LocalTime.of(8, 10);
            double lateDeduction = 0.0;
            boolean isLate = loginTime.isAfter(gracePeriodEnd);
            if (isLate) {
                // Calculate minutes late
                long minutesLate = Duration.between(gracePeriodEnd, loginTime).toMinutes();
                double perMinuteRate = hourlyRate / 60.0;
                double multiplier = 1.5;
                lateDeduction = minutesLate * perMinuteRate * multiplier;
            }
            // ✅ Calculate hours worked
            long hoursWorked = Duration.between(loginTime, logoutTime).toHours();
            if (hoursWorked < 0) {
                throw new ArithmeticException("Invalid pay coverage. Please ensure the logout time is after the login time.");
            }
            if (hoursWorked > 1) {
                hoursWorked -= 1;
                System.out.println("Lunch break deduction applied (-1 hour).");
            }
            double basicSalary = hoursWorked * hourlyRate;

            // ✅ Apply deductions
            double sss = basicSalary * 0.045;
            double philhealth = basicSalary * 0.03;
            double pagibig = 100.00;
            double tax = basicSalary * 0.10;
            double totalDeductions = sss + philhealth + pagibig + tax + lateDeduction;
            double netPay = basicSalary - totalDeductions;

            String output = String.format("""
        Employee Name: %s
        Employee ID: %d
        Birth Date: %s
        Age: %d                                  
        Hours Worked: %d
        Hourly Rate: PHP %.2f
        ----------------------------
        Gross Salary: PHP %.2f

        Deductions:
          SSS:        PHP %.2f
          PhilHealth: PHP %.2f
          Pag-IBIG:   PHP %.2f
          Tax:        PHP %.2f
          Late Deduction:  PHP %.2f                                
        ----------------------------
        Net Pay: PHP %.2f
        """,
                    empName,
                    empNum,
                    birthDate,
                    age,
                    hoursWorked,
                    hourlyRate,
                    basicSalary,
                    sss,
                    philhealth,
                    pagibig,
                    tax,
                    lateDeduction,
                    netPay
            );

            // ✅ Show payroll summary
            JOptionPane.showMessageDialog(this, output, "Payroll Summary", JOptionPane.INFORMATION_MESSAGE);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "❌ Error: Please enter a numeric Employee ID!",
                    "Input Error", JOptionPane.ERROR_MESSAGE);
        } catch (IllegalArgumentException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Validation Error", JOptionPane.ERROR_MESSAGE);
        } catch (ArithmeticException ex) {
            // Handles invalid pay coverage (e.g., logout before login)
            JOptionPane.showMessageDialog(this, "❌ Error: " + ex.getMessage(), "Calculation Error", JOptionPane.ERROR_MESSAGE);
        } catch (DateTimeParseException ex) {
            JOptionPane.showMessageDialog(this, "❌ Error: Use correct formats (YYYY-MM-DD for Birth Date, HH:MM for time).",
                    "Input Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "❌ Unexpected Error: " + ex.getMessage(),
                    "System Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_computebtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ver().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField BirthDate;
    private javax.swing.JTextField EmployeeID;
    private javax.swing.JTextField HourlySalaryRate;
    private javax.swing.JTextField LGITmph;
    private javax.swing.JTextField LGOTmph;
    private javax.swing.JButton computebtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTextField jTextField6;
    // End of variables declaration//GEN-END:variables
}
